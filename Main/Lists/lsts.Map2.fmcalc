// lsts.Map2 ( _list_1; _list_2; _calculation; _input_types; _output_type )
//
// Purpose:		Maps one list to another by running each item in the list through the specified
//				calculation. The calculation should be a valid FileMaker calculation if %L is
//				replaced by an item in the list.
//
// Parameters:		_list_1:		The first list to place member items into the calculation.
//				_list_2:		The second list to place member items into the calculation.
//				_calculation:	The calculation to apply to each value in the list.
//				_input_types:	A list of the input types of the lists.
//				_output_type:	The data type of the output values.
//
// Requirements: 	devp.DataType* (not required, but meant for use with this and other map functions)
//				devp.GetAsType
//				lsts.First
//				lsts.Rest
//
// Author:			Charles Ross
// Version:		1.0 written 15-03-06
//
// Notes:			The calculation should have the string "%1" and "%2" to indicate where each lists items
//				should be inserted into the calculation.
//
// Todo:			Find a way to generalize mapping functions, perhaps by using lsts.CustomList.
//
//				The "2" in lsts.Map2 is an indication that the calculation should have two parameters.
//				Someday I hope to generalize this to accept a list of lists and be able to take a variable
//				number of parameters.
//
//				Find a way to work this without having to specify data types.
//
// Example:
// lsts.Map2( "1¶2¶3"; "4¶5¶6"; "%1 + %2"; "number¶number"; "number" ) == "5¶7¶9"

Case (
  // Recursive exit condition
  ( ValueCount ( _list_1 ) = 0 )
    or ( ValueCount ( _list_2 ) = 0 );
  devp.Nil;

  Let(
    [
      _first_1 = lsts.First ( _list_1 );
      _rest_1 = lsts.Rest ( _list_1 );

      _first_2 = lsts.First ( _list_2 );
      _rest_2 = lsts.Rest ( _list_2 );

      _input_type_1 = GetValue( _input_types; 1 );
      _input_type_2 = GetValue( _input_types; 2 );

      _value_1 = devp.GetAsType ( _first_1; _input_type_1 );
      _value_2 = devp.GetAsType ( _first_2; _input_type_2 );

      // Coerce to number for the calculation evaluation unless the type is text.
      _value_1 = Case(
        _input_type_1 = devp.DataTypeText;		Quote ( _value_1 );
									GetAsNumber ( _value_1 )
      );
      _value_2 = Case (
        _input_type_2 = devp.DataTypeText;		Quote ( _value_2 );
									GetAsNumber ( _value_2 )
      );

      _calc			= Substitute ( _calculation; ["%1"; _value_1]; ["%2"; _value_2] );
      _calc_result		= Evaluate ( _calc );
      _calc_value		= devp.GetAsType ( _calc_result; _output_type );

      _result = _calc_value & ¶ & lsts.Map2 ( _rest_1; _rest_2; _calculation; _input_types; _output_type )
    ];

    _result
  )
)
