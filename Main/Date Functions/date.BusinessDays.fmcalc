// date.BusinessDays ( _start; _end )
//
// Purpose:		Returns the number of business days (non-holiday weekdays) falling between
//				_start and _end, inclusive.
//
// Parameters:		_start: 	A date
//              		_end: 	A date, _end ≥ _start
//
// Requirements: 	date.BusinessHolidays
//
// Author:			Jeremy Bante
// Version:		1.1 edited 11-10-19
//
// Example:
// date.BusinessDays ( Date ( 1; 1; 2015 ); Date ( 2; 1; 2015 ) ) = 20

Let (
  [
    // compare calendar years, in case range spans multiple years
    _start_year	= Year ( _start );
    _end_year	= Year ( _end );
    _split_date	= Date ( 1; 1; _start_year + 1 ); // first 1 Jan after startDate
    _end_date	= Case (
      _end_year > _start_year;	_split_date - 1;
      						_end
    );

    _start_day	= DayOfWeek ( _start );
    _end_day  	= DayOfWeek ( _end_date );

    _start_sat	= _start - _start_day + 7;
    _end_sat	= _end_date - _end_day;
    _full_weeks	= Div ( _end_sat - _start_sat + 1; 7 );

    _leading_week_days = Choose (
      _start_day - 1;
      5; 5; 4; 3; 2; 1; 0
    );
    _trailing_week_days = Choose (
      _end_day - 1;
      0; 1; 2; 3; 4; 5; 5
    );

    _holiday_calc_let_prefix =
      "Let (" & ¶ &
      "  [" & ¶ &
      "    _d = GetAsDate (\"";
    _holiday_calc_let_suffix =
      "\" );" & ¶ &
      "    _n = DayOfWeek ( _d )" & ¶ &
      "  ];" & ¶ &
      ¶ &
      "  ( _d ≥ GetAsDate ( _start ) )" & ¶ &
      "    and ( _d ≤ GetAsDate ( _end ) )" & ¶ &
      "    and ( _n > 1 )" & ¶ &
      "    and ( _n < 7 )" & ¶ &
      ")";
      
    _holiday_calc =
      _holiday_calc_let_prefix
      & Substitute ( date.BusinessHolidays ( _start_year ); "¶"; "|" )
      & _holiday_calc_let_suffix;
      
    _holidayCalculation = // Add 1 for each weekday holiday within range
      Substitute ( _holiday_calc;
        [ "|";			_holiday_calc_let_suffix & "  + " & _holiday_calc_let_prefix ];
        [ "startDate";	Quote ( _start ) ];
        [ "endDate";	Quote ( _end_date ) ]
      );
      
    _holidays = Evaluate ( _holidayCalculation )
  ];

  ( 5 * _full_weeks )
    + _leading_week_days
    + _trailing_week_days
    - _holidays
    + Case(
      _end_year > _start_year;
      date.BusinessDays ( _split_date; _end );
      0
    )
)
