// nump.Convergent ( _number; _p2; _q2; _p1; _q1; _max_denominator )
//
// Purpose:		The recursive utility function for nump.Fraction, given proper initial values from
//				nump.Fraction.
//
// Parameters:		_number
//              		_p2
//				_q2
//				_p1
//				_q1
//				_max_denominator
//
// Requirements: 	nump.GreatestCommonDivisor
//				devp.Nil
//
// Author:			Mikhail Edoshin
// Version:		1.0 written 06-01-01
//
// Notes:			http://web.archive.org/web/20100126010511/
//				  http://edoshin.skeletonkey.com/2006/01/fraction_approx.html
//				https://en.wikipedia.org/wiki/Continued_fraction
//
// Todo:			I don't really understand how this function works or exactly what the parameters mean,
//				so reading the Wikipedia article on continued fractions, which Mikhail references,
//				would prove useful.
//
//
// Example:
// nump.Convergent( 0.625 - Int( 0.625 ); 1; 0; Int( 0.625 ); 1; 16 ) = "5/8"

Let (
  [
    _int_recip	= Int ( 1 / _number );
    _q			= _int_recip * _q1 + _q2
  ];

  Case (
    _q > _max_denominator;
    Let (
      [
        _divisor		= nump.GreatestCommonDivisor ( _p1; _q1 ); 
        _enumerator	= Div ( _p1; _divisor );
        _denominator	= Div ( _q1; _divisor );
        _int_part		= Div ( _enumerator; _denominator );
        _frac_part		= Mod ( _enumerator; _denominator );

        _has_int_part			= _int_part ≠ 0;
        _has_frac_part			= _frac_part ≠ 0;
        _has_int_and_frac_part	= _has_int_part and _has_frac_part;

        _frac = Case (
          _has_int_part;		_int_part;
					devp.Nil
        );

        _frac = _frac & Case (
          _has_int_part and _has_frac_part;	" ";
								devp.Nil
        );

        _frac = _frac & Case (
          _has_frac_part;	_frac_part & "/" & _denominator;
					devp.Nil
        )
      ];

      Case (
        ( _int_part = 0 ) and ( _frac_part = 0 );		0;
									_frac
      )
    );

    Let (
      [
        _p = _int_recip * _p1 + _p2
      ];

      nump.Convergent ( Abs ( 1 / _number - _int_recip ); _p1; _q1; _p; _q; _max_denominator )
    )
  )
)
