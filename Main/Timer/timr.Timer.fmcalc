// timr.Timer ( _name; _action )
//
// Purpose:		Manipulates the named timer with the given action, storing timers in a global variable.
//
// Parameters:		_name:	The name of the timer to perform the action on.
//				_action:	Which action to perform.
//
// Requirements: 	kege.ParamGet
//				kege.Param
//				kege.ParamDelete
//				timr.Start
//				timr.Stop
//				timr.Read
//				timr.Delete
//
// Author:			Arnold Kegebein
// Version:		1.0 written 10-06-01
//
// Notes:			If the timer exiss already, returns the difference between the timer's start and the
//				current time.
//
//				http://www.kegebein.net/blog/2010/06/unlimited-timer/
//
// Todo:			To dos
//
// Example:
// // With the side effect that the timer is stored for future use.
// timr.Timer ( "timer"; timr.Start ) & timr.Timer ( "timer"; timr.Stop ) = "0:00:00"

Let(
  [
    _name = Case(
      IsEmpty( _name );	devp.Nil;
      					_name
    ); // This seems superfluous.

    _action = Upper( _action );

    _now = Get( CurrentTimeStamp );
    _timer = kege.ParamGet( _name; $$_TIMR_TIMER );

    _start = kege.ParamGet( timr.Start; _timer );
    _stop = kege.ParamGet( timr.Stop; _timer );
    _stop = Case(
      IsEmpty( _stop );		_now;
      					_stop
    );

    _diff = Case(
      IsEmpty( _start );		devp.Nil;
      					GetAsTimestamp( _stop ) - GetAsTimestamp( _start )
    );

    _timer = Case(
      _action = timr.Start;
      kege.Param( timr.Start; _now );

      _action = timr.Stop and IsEmpty( _start );
      kege.Param( timr.Start; _stop ) & kege.Param( timr.Stop; _stop );

      _action = timr.Stop;
      kege.Param( timr.Start; _start ) & kege.Param( timr.Stop; _stop )
    );

    $$_TIMR_TIMER = Case(
      _action = timr.Start or _action = timr.Stop;
      kege.ParamDelete( _name; $$_TIMR_TIMER ) & kege.Param( _name; _timer );

      _action = timr.Delete;
      kege.ParamDelete( _name; $$_TIMR_TIMER );

      $$_TIMR_TIMER
    )
  ];

  _diff
)
