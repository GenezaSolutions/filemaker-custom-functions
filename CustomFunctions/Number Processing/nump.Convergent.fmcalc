// http://edoshin.typepad.com/bits_and_pieces/2006/01/fraction_approx.html#more
Let(
  [
    _int_recip = Int( 1 / _number );
    _q = _int_recip * _q1 + _q2
  ];

  Case(
    _q > _max_denominator;
    Let(
      [
        Divisor = nump.GreatestCommonDivisor( _p1; _q1 ); 
        Enumerator = Div( _p1; Divisor );
        Denominator = Div( _q1; Divisor );
        IntegerPart = Div( Enumerator; Denominator );
        FractionalPart = Mod( Enumerator; Denominator )
      ];

    Case(
      IntegerPart = 0 and FractionalPart = 0; 0;
      Case( IntegerPart ≠ 0; IntegerPart )
        & Case( IntegerPart ≠ 0 and FractionalPart ≠ 0; " " )
        & Case( FractionalPart ≠ 0; FractionalPart & "/" & Denominator ) ) );

    Let(
      P = _int_recip * _p1 + _p2;
      nump.Convergent( Abs( 1 / _number - _int_recip ); _p1; _q1; P; _q; _max_denominator )
    )
  )
)
