/*  based on python's list comprehensions
_EXPRESSION:

"x" & … & "y & upper(z)"
or "x*2"
ALSO excepts "x…y…upper(z)" etc - so turn this off if u want to send that in your values - see ^_^ shortcut subsitution code below

_VARS: x…y…[A…b]
_LIST:  [ [hello, list, [is, ignore]], [goodbye, dict, [isn't, notice]] ]
_CONDITION: b ≠ "ignore"

if u send a ValueList as _list then it will convert it...
*/

If ( not IsEmpty ( _vars);



Let ( [

_vars = If ( Position (_vars ; "…" ; 0 ; 1 ) or Position (_vars ; json.… ; 0 ; 1) ; json.|List ( Substitute ( _vars ; "…"; json.… ) ) ; _vars ) ;
$cf_|Tool_error = "" ;
_list = If ( json.#VarType ( _list ) = "list" ; _list ; json.|vl ( _list ) ) ;  // force _list to be syntatic list
_varsValid = json.|Tool ( "COMP_vars_in_list" ; json.#Get ( _list ; 0 ) ; json.#VarType ( _vars ) ; _vars ; 0 ; json.Null ; json.Null ) ;

// --- fix expression format if required
_expression = Substitute ( _expression ; "…" ; json.… ) ;    // --- ^_^ shortcut code here
_expression = If ( Position ( _expression ; json.… ; 0 ; 1 ) ; json.|List ( _expression ) ; _expression ) ;  
_expression = If ( IsEmpty ( $cf_|Tool_error ); Case ( json.#VarType ( _expression ) = "list"  ; 
                            "|list ( " & json.|Tool ( "COMP_expression" ; json.Null ; 0 ; json.Null ; json.Null ; json.#Count ( _expression ) ; _expression ) & " ) " ; 
                            json.|Tool ( "COMP_expression" ; json.Null ; json.Null ; json.Null ; json.Null ; json.Null ; _expression )
                          ) ) ; // end case and if 
_result = If ( IsEmpty ( $cf_|Tool_error ) ; json.|Tool ( "COMP" ; _list ; 0 ; _vars ; json.#Count ( _list ) ; Substitute ( _condition ; "¶" ; "\¶" ) ; _expression ) )
] ;


// it must be allowed to return an empty list if needs be
json.|List (
     Left ( _result ; Length ( _result ) - 3 ) // WEIRD code to remove trailing "…" that can't be easily removed elsewhere owing to dependence on condition statement evaluation
)

)



) // end IF
