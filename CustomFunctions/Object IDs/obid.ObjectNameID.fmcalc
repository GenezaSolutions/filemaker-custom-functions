// devp.ObjectID ( _object; _type; _file; _layout )
//
// Purpose:		Returns the internal FileMaker ID of an object if an object is passed or
//				the object name if an ID is passed.
// Parameters:		_object:	Supply either the name or internal ID of an object
//				_type:	One of "Table", "Layout", "Field", "Script" or "ValueLIst", only
//						first letter is significant.
//				_file:		The file to use, empty implies current file.
//				_layout:	The layout to use, empty implies current layout.
//
// Requirements:	requirements
//
// Author:			Fabrice Nordman
// Version:		1.0 written 08-05-01
//				1.2 edited 08-06-01 removed dependency on PositionValue
//				1.3 edited 08-07-01 add ability to send qualified field name with no layout
//				1.4 edited 08-08-01 fixed but that returned incorrect ID
//				1.5 edited 08-10-01 documentation fix, empty result fix
//				1.5.1 edited 08-12-01 documentation update
//				1.5.2 edited 09-02-01 remove repetition number from parameter, does not handle
//					field names with [ any more.
//				1.6 edited 09-03-01 accepts numeric field parameters ("1065234::24")
//
// Notes:			For fields (_type = "F"), if you use the full field name (table::fieldname)
//				AND an empty var.layout parameter, the function will assume you are
//				referring not to current layout but to the table occurrence found in
//				the _type
//
// Example:
// obid.ObjectID ( obid.ObjectID ( "name"; "field"; ""; "" ); "field"; ""; "" ) = "name"

Let(
  [
    _file = Case(
      IsEmpty( _file );	Get( FileName );
				_file
    );
  
    _layout = Case(
      IsEmpty( _layout );
      Case( 
        PatternCount( _object; "::" );	GetValue( Substitute( _object; "::"; ¶ ); 1 );
							Get( LayoutName ) // default
      );
      _layout // default
    );
  
    _layout = Case (
      ( Int( _layout ) = _layout )
        and ( Length( _layout ) = 7 );	obid.ObjectNameID ( _layout; "T"; _file; "" );
							_layout
    );

    // Allow type to be a single character (T,L,F,S,V)
    _type = Left ( _type; 1 );
    _type = Choose(
      Position( "TLFSV"; _type; 1; 1 ) - 1;
      "Table"; "Layout"; "Field"; "Script"; "ValueList"
    );

    _object = Case( // remove the repetition number
      ( _type = "Field" )
        and PatternCount( _object; "[" );		Left( _object; Position( _object; "["; 10000; -1 ) -1 );
								_object
    );
  
    _object = Case( // for fields, do not take TO
      ( _type = "Field" )
        and PatternCount( _object; "::" );	Replace( _object; 1; Position( _object; "::"; 1; 1 ) + 1; "" );
								_object
    );
  
    _endOfString = "( \"" & _file & "\"" & Case(
      _type = "field";
      "; \"" & _layout & "\""
    ) & ")";

    _names		= Evaluate( _type & "Names" & _endOfString );
    _ids		= Evaluate( _type & "IDs" & _endOfString )
  ];

  Case(
    _object = GetAsNumber( _object );

    // Convert ID -> Name
    Case(
      not IsEmpty( FilterValues( _object; _ids ) );
      GetValue( _names; Let(
          [
            _text = _ids;
            _item = _object;
            _adj = ¶ & _text & ¶
          ];

          PatternCount( Left( _adj; Position( _adj; ¶ & _item & ¶; 1; 1 ) + 1 ); ¶ )
        )
      )
    );
      
      // Convert Name -> ID
      Case (
        not IsEmpty ( FilterValues ( _object; _names ));
          GetValue ( _ids; Let ([
                                      _text = _names;
                                      _item = _object;
                                      _adj = ¶ & _text & ¶
                              ];
                                PatternCount ( Left ( _adj; Position ( _adj; ¶ & _item & ¶; 1; 1 ) + 1 ); ¶ )
                              )
          )
      )
  )
)
