// lsts.QuickSort ( _list )
//
// Purpose:		Sorts list with the popular and reasonably efficient quicksort algorithm
//
// Parameters:		_list: The list to sort.
//
// Requirements:	lsts.ValuesLessThanOrEqual
//				lsts.ValuesGreaterThan
//				lsts.Rest
//
// Author:			Jeremy Bante
// Version:		1.0 written 15-03-11
//
// Note:			*Values functions append a return to the last item in the list. The List function, which
//				seems to be more commonly used, does not. Therefore this function accounts for this
//				by lopping off the last character when necessary.
//
// Example:
// lsts.QuickSort_ ( List ( "one"; "two"; "three"; "four" ) ) = "four¶one¶three¶two¶"

Let (
  [
    _length			= ValueCount ( _list );
    _index			= Ceiling ( Random * _length );
    _pivot			= MiddleValues ( _list; _index; 1 ); // Leave carriage return in this case
    _list_less_pivot	= LeftValues ( _list; _index -1 ) & RightValues ( _list; _length - _index );
    _list_less_len		= Length ( _list_less_pivot )
  ];

  Case (
    // if list is trivial [only one element]...
    _length < 2;
    // return list as-is
    _list;

    // if list is worth sorting...
    Let (
      [
        _less_equal_than_pivot	= lsts.ValuesLessThanOrEqual ( _list_less_pivot; _pivot );
        _greater_than_pivot		= lsts.ValuesGreaterThan ( _list_less_pivot; _pivot )
      ];

      lsts.QuickSort_ ( _less_equal_than_pivot ) &		// sort everything less than or equal to pivot
      _pivot  &								// place pivot in middle
      lsts.QuickSort_ ( _greater_than_pivot )			// sort everything greater than pivot
    )
  )
)
