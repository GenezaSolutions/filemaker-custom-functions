// lsts.Subtract ( _list_1; _list_2 )
//
// Purpose:		Returns the elements in _list_1 that do not exist in _list_2.
// Parameters:		_list_1: A list of items
//              		_list_2: A list of items that should have at least some members in common with _list_1.
//
// Author:			Charles Ross
// Version:		1.0 written 15-03-11
//
// Notes:			Is this the mathematical concept of relative complement?
//
// Example:
// lsts.Subtract ( "1¶2¶3"; "2¶3¶4" ) = "1"
//    and lsts.Subtract ( "2¶3¶4"; "1¶2¶3" ) = "4"

Case (
  ValueCount ( _list_1 ) = 0;
  devp.Nil;

  Let (
    [
      _first = lsts.First ( _list_1 );
      _rest = lsts.Rest ( _list_1 );

      _is_member = lsts.IsMember ( _first; _list_2 );

      _entry = Case (
        _is_member;	devp.Nil;
				_first & "¶"
      )
    ];

    _entry & lsts.Subtract ( _rest; _list_2 )
  )
)
