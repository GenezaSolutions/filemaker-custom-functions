// scpm.AssignParams
//
// Purpose:		Uses a script's parameter to set name/value variable pairs and return whether the
//				provided script parameter satisfies the script's name's template.
//
// Requirements: 	scpm.ParamToVars
//				scpm.SetAssignParamVars
//				scpm.SingleParamToVar
//				scpm.WordsToList
//				devp.Nil
//
// Author:			Charles Ross, inspired by Alexander Zueiv
// Version:		1.0 written 15-03-11
//
// Notes:			The return value of this function is a small portion of its purpose. All the return value
//				does is indicate if the script's required parameters are present. True indicates that all
//				required parameters are present, False indicates that at least one required parameter
//				is absent.
//
//				Scripts that make use of this function should be named such that the expected
//				parameters are specified. All parameters appear within parentheses. Optinoal
//				parameters appear within braces and mutually exclusive parameters within brackets.
//				For example:
//
//				Script Name ( Required {; Optional } [; Alternative1 | Alternative2] )
//
//				It's expected that mutually exclusive, or alternative, parameters only have one of their
//				options set. In the above case it's expected that Alternative1 or Alternative2 will be set
//				but not both. Generally the one being passed will simply be given a value of True.
//
//				Use the scpm.Param custom function to pass parameters to scripts, concatenating each
//				parameter directly. For example:
//
//				scpm.Param ( "Required"; "required value" ) &
//				scpm.Param ( "Optional"; "optional value" ) &
//				scpm.Param ( "Alternative1"; True )
//
//				If the above calculation is sent to the example script named above, a call to
//				scpm.AssignParams will return True and have the side effect of assigning the variables
//				$Required, $Optional and $Alternative1 the values specified.
//
// Todo:			Currently named parameters cannot have carriage returns in them. Change the function
//				to allow lists.
//
//				Currently parameter names cannot have underscores in them. Allowing this will
//				probably require a change to the scpm.WordsToList function. Use camel case for
//				parameter names (i.e., "ParamName").
//
//				The ability to take a string that is formatted with name value pairs as accomplished
//				by scpm.Param would be useful in other situations, such as script return values.
//				Abstract this out.
//
//				The variable names are too simple and should be namespaced with a prefix.
//
//				Provide better examples throughout the sub functions.
//
// Example:
// // Assuming a call within a script named as the example above with a script parameter passed as in the
// // example calculation above...
// scpm.AssignParams = 1

Let ( [
  //----------------------------------------------------------------------------
  _ = scpm.SetAssignParamVars;		// Set up the local script variables used in this
								// custom function set.

  //----------------------------------------------------------------------------
  _ = scpm.ParamToVars ( $_scpm_param_list );		// Convert the script parameter passed
										// $_scpm_parsed into local script
										// variables.

  //----------------------------------------------------------------------------
  $_scpm_troubleshoot = False;			// If scpm_troubleshoot is false, clear out the script
								// variables when finished processing.

  //----------------------------------------------------------------------------
  $_scpm_parsable = Substitute (		// Ease parsing by removing spaces. We'll add the
								// dollar sign ourselves.
    $_scpm_param_template;
    [ " "  ; devp.Nil ];
    [ "$" ; devp.Nil ]
  );

  //----------------------------------------------------------------------------
  $_scpm_req_params = Case (			// Remove optional parameters.
    PatternCount ( $_scpm_parsable; $_scpm_opt_char );
    Left ( $_scpm_parsable; Position ( $_scpm_parsable; $_scpm_opt_char; 1; 1 ) - 1 );
    $_scpm_parsable
  );

  //----------------------------------------------------------------------------
  $_scpm_parsed = "$" & Substitute (		// Enclose alternate possibilities in parentheses
								// and prepend parameter names with the dollar
								// sign.
    $_scpm_req_params;
    [ $_scpm_break_char & $_scpm_alt_open_char ;   ";( $"                             ];
								// Enclose the optional parameters in parentheses.
    [ $_scpm_alt_char ;						$_scpm_alt_char & "$"  ];
								// Add dollar signs before each optional
								// parameter after the first.
    [ $_scpm_alt_close_char ;					" )"		                    ]
								// Close the optional parameters parentheses.
  );

  //----------------------------------------------------------------------------
  $_scpm_parsed = Substitute (			// Handle the possible special case with the break
								// character is followed by alternative parameters.
    $_scpm_parsed;
    [ $_scpm_break_char & "("; "^^^^"                 ];
								// Substitute an unlikely string for the break
								// sequence we want to keep.
    [ $_scpm_break_char ;		$_scpm_break_char & "$" ];
    [ "^^^^" ;				$_scpm_break_char & "("  ] );
								// Substitute the break sequence we want to keep
								// back in.

  //----------------------------------------------------------------------------
								// Add in the FileMaker code to ensure that the
								// appropriate strings are not empty, thus validating
								// that each parameter that is required is present.
  $_scpm_fm_code = "( not IsEmpty( " & Substitute (
    $_scpm_parsed;
    [ $_scpm_break_char; " ) ) and ( not IsEmpty( " ];
    [ $_scpm_alt_char; " & " ]
  ) & " ) )";

  //----------------------------------------------------------------------------
								// Store the result and evaluate the calculation
								// before we possibly clear the variables.
  _result = ( $_scpm_fm_code = $_scpm_empty_param_template ) or Evaluate( $_scpm_fm_code );

  //----------------------------------------------------------------------------
								// Clear out the script variables if we're not
								// troubleshooting the function.  
  _ = Case(
    not $_scpm_troubleshoot;
    Let(
      [
        $_scpm_troubleshoot			= devp.Nil;
        $_scpm_parsable				= devp.Nil;
        $_scpm_req_params				= devp.Nil;
        $_scpm_parsed					= devp.Nil;
        $_scpm_script					= devp.Nil;
        $_scpm_raw_params				= devp.Nil;
        $_scpm_params				= devp.Nil;
        $_scpm_open_char				= devp.Nil;
        $_scpm_close_char				= devp.Nil;
        $_scpm_break_char				= devp.Nil;
        $_scpm_alt_open_char			= devp.Nil;
        $_scpm_alt_close_char			= devp.Nil;
        $_scpm_alt_char				= devp.Nil;
        $_scpm_opt_char				= devp.Nil;
        $_scpm_param_template			= devp.Nil;
        $_scpm_param_list				= devp.Nil;
        $_scpm_fm_code				= devp.Nil;
        $_scpm_empty_param_template	= devp.Nil
     ];

     devp.Nil
    )
  )

  ];

  _result
)
