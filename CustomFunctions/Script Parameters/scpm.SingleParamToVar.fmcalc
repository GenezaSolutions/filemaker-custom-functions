// Assigns the single parameter named to a local script variable. $Params is a
//   variable declared in the custom function SetAssignParamVars. It's value is
//   simply Get( ScriptParameter ). The ParamName may not have been passed (it
//   may be optional to the script), so we check for its existence before doing
//   anything. The function doesn't actually return anything useful, but after
//   it's run, the variable named in ParamName should have a local script
//   variable declared with that name if the caller of the script passed such a
//   parameter.
//
// EXTERNAL REQUIREMENTS: The SetAssignParamVars custom function (to declare the
//   $Params script variable).
//
// Written by Charles Ross. Inspired by Alexander Zueiv.

Case(
  // Does the parameter exist in the arguments to the script?
  PatternCount( $Params; _param_name );  
  Let( [
      // Get the value of the named parameter by evaluating within a Let
      //   function the passed parameter and returning in that statement the
      //   named parameter.
      Value = Evaluate ( "Let ( [ " & $Params & "] ; " & _param_name & " )" );

      // Construct a local script variable and assign it the value found above.
      x = Evaluate( "Let( [ $" & _param_name & " = \"" & Value & "\" ]; \"\" )" )
    ];

    // Return the value of the local script variable. This is a debugging
    //   feature to make sure it works correctly.
    Evaluate( "$" & _param_name )
  );

  "" // Empty string returned if the parameter doesn't exist.
)
