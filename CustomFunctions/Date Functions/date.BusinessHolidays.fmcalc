/**
 * =========================================================
 * BusinessHolidays( calendarYear )
 *
 * RETURNS:
 *    A Â¶-delimited list of the dates of observed holidays in calendarYear
 *
 * PARAMETERS:
 *    calendarYear
 *
 * DEPENDENCIES: none
 *
 * NOTES:
 *    This version of this function includes observed U.S. federal holidays.
 *    It should be modified to include any holidays observed by the users of
 *    each particular system.
 *
 * TODO:
 *    Note the logic for all of these holidays falls into two categories,
 *    holidays that are on a specific day (7/4, 12/25) and holidays that fall
 *    on the Xth weekday of the month (Martin Luther King Jr on the 3rd
 *    Monday in January) and so the algorithm for all of the holidays are
 *    very similar. These algorithms should be broken into two separate
 *    custom functions.
 *
 * RELEASE:  2011-10-18
 * =========================================================
 */

Let(
  [
    _newYearsDay = Let(
      [
        _date = Date( 1; 1; _calendarYear );
        _day  = DayOfWeek( _date )
      ];
      
      Case(
        _day = 1;
        _date + 1; // following Monday

        _day = 7;
        ""; // previous Friday (in previous year)
      
      // Else
        _date
      )
    );
    
    //======================================================
    // Martin Luther King, Jr. Day (3rd Monday in January)
    _martinLutherKingJrDay = Date( 1; 15; _calendarYear ) 
      + Choose( DayOfWeek( Date( 1; 1; _calendarYear ) ) - 1;
        1; 0; 6; 5; 4; 3; 2
      );
      
    //======================================================
    // Washington's Birthday (3rd Monday in February)
    _washingtonsBirthday = Date( 2; 15; _calendarYear )  // earliest possible
      + Choose( DayOfWeek( Date( 2; 1; _calendarYear ) ) - 1;
        1; 0; 6; 5; 4; 3; 2  // adjust for day of week of month start
      );
    
    //======================================================
    // Memorial Day (last Monday in May)
    _memorialDay = Date( 5; 25; _calendarYear )  // earliest possible
      + Choose(
        DayOfWeek( Date( 5; 31; _calendarYear ) ) - 1;
        0; 6; 5; 4; 3; 2; 1  // adjust for day of week of month end
      );
      
    //======================================================
    // Independence Day (4 Jul)
    _independenceDay = Let(
      [
        _date = Date( 7; 4; _calendarYear );
        _day  = DayOfWeek( _date )
      ];
    
      Case(
        _day = 1;
        _date + 1;  // following Monday
        
        _day = 7;
        _date - 1;  // previous Friday
      // Else
        _date
      )
    );
    
    //======================================================
    // Labor Day (1st Monday in September)
    _laborDay = Date( 9; 1; _calendarYear )  // earliest possible
      + Choose(
        DayOfWeek( Date( 9; 1; _calendarYear ) ) - 1;
        1; 0; 6; 5; 4; 3; 2  // adjust for day of week of month start
      );
    
    //======================================================
    // Columbus Day (2nd Monday in October)
    _columbusDay = Date( 10; 8; _calendarYear )  // earliest possible
      + Choose(
        DayOfWeek( Date( 10; 1; _calendarYear ) ) - 1;
        1; 0; 6; 5; 4; 3; 2  // adjust for day of week of month start
      );
    
    //======================================================
    // Veterans Day (11 Mov)
    _veteransDay = Let(
      [
        _date = Date( 11; 11; _calendarYear );
        _day  = DayOfWeek( _date )
      ];
    
      Case(
        _day = 1;
        _date + 1;  // following Monday
        
        _day = 7;
        _date - 1;  // previous Friday
      // Else
        _date
      )
    );
    
    //======================================================
    // Thanksgiving Day (4th thursday in November)
    _thanksgivingDay = Date( 11; 22; _calendarYear )  // earliest possible date
      + Choose(
        DayOfWeek( Date( 11; 1; _calendarYear ) ) - 1;
        4; 3; 2; 1; 0; 6; 5  // adjust for day of week of month start
      );
      
    //======================================================
    // Christmas Day (25 Dec)
    _christmasDay = Let(
      [
        _date = Date( 12; 25; _calendarYear );
        _day  = DayOfWeek( _date )
      ];
    
      Case(
        _day = 1;
        _date + 1;  // following Monday
        
        _day = 7;
        _date - 1;  // previous Friday
      // Else
        _date
      )
    );
    
    //======================================================
    // New Years Day (observed from next year)
    _nextNewYearsDay = Let(
      [
        _date = Date( 1; 1; _calendarYear + 1 )
      ];
    
      Case(
        DayOfWeek( _date ) = 7;
        _date - 1
      // Else, Null
      )
    )
  ];

  List(
    _newYearsDay;
    _martinLutherKingJrDay;
    _washingtonsBirthday;
    _memorialDay;
    _independenceDay;
    _laborDay;
    _columbusDay;
    _veteransDay;
    _thanksgivingDay;
    _christmasDay;
    _nextNewYearsDay
  )
)
