// repf.RepetitionNumber ( _repeating_field; _value; _match_target )
//
// Purpose:		Return a carriage-return-delimited list of repetition numbers whose corresponding
//				values match the input search criteria.
//
// Parameters:		_repeating_field:	Pass the field itself (as if passing the field value), not using
//								GetFieldName, because the custom function engine will interpret
//								the parameter as a reference.
//              		_value:			The value to be matched on. If empty, search for null values. If
//								"*" (asterisk), search for all non-null values. Otherwise search
//								for matching values. Case insensitive.
//				_match_taget:		Which matching repetition number(s) to return. If anything
//								other than "*" (asterisk), return only one matching repetition
//								number; if "*", return all matching repetition numbers. If empty,
//								return the last matching repetition number. If a number, n, return
//								the nth matching repetition number.
//
// Requirements: 	rept.RepNumber_
//				rept.FieldReps
//				devp.Nil
//				rept.All
//				rept.Wildcard
//
// Author:			Will M. Baker
// Version:		1.0 written 11-10-29
//
// Notes:			http://buzz.beezwax.net/2011/10/29/working-with-repeating-fields
//
// Example:
// // Assuming a repeating field with 5 repetitions with "apple", "orange", "", "pear", ""...
// // Return null values (devp.Nil), all repetitions ("*")
// rept.RepNumber ( repeating_field; devp.Nil; "*" ) = "3Â¶5"

Let (
  [
    _match_max = Case (
      IsEmpty ( _value );
      rept.FieldReps ( _repeating_field ) - Count ( _repeating_field ); // Syntax: Null values.

      _value = rept.Wildcard;
      Count ( _repeating_field ); // Syntax: Non-null values.

      ValueCount ( FilterValues ( List ( _repeating_field ); _value ) ) // Specific value.
    );

    _match_target = Case (
      IsEmpty ( _match_target );
      _match_max; // Syntax: Return last match.

      _match_target = rept.All;
      _match_target; // Syntax: Return all matches.

      _match_target > _match_max;
      devp.Nil; // If there are fewer matches than sought by targetMatch, return nothing.

      _match_target
    )
  ];

  Case (
    _match_max and ( not IsEmpty ( _match_target ) );
    rept.RepNumber_ ( _repeating_field; _value; _match_target; _match_max; 0; 1 );

    devp.Nil	// If the target value is not in the list, or there are too few matches, don't waste time
			//   searching the list.
  )
)
